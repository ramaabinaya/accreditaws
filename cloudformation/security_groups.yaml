AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template includes all security groups that are needed for CentizenApps'
Parameters:
  vpcId:
    Description: VPC ID where this security group should be created
    Type: AWS::EC2::VPC::Id
  AllowHTTPToWorld: 
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
    Description: Enter true or false
  AllowHTTPSToWorld: 
    Type: String
    Default: false
    AllowedValues: 
      - true
      - false
    Description: Enter true or false

Conditions: 
  enableHTTPToWorld:   !Equals [ !Ref AllowHTTPToWorld,  true ]
  enableHTTPSToWorld:  !Equals [ !Ref AllowHTTPSToWorld, true ]
  disableHTTPToWorld:  !Equals [ !Ref AllowHTTPToWorld,  false ]
  disableHTTPSToWorld: !Equals [ !Ref AllowHTTPSToWorld, false ]

Mappings:
  CentizenIPs:
    World:
      ip: "0.0.0.0/0"
    AmalHome:
      ip: "50.53.43.182/32"
    JamesHome:
      ip: "74.39.164.207/32"
    JamesHomeOld:
      ip: "50.39.97.78/32"
    JanuryHome:
      ip: "49.206.126.131/32"
    JanuryHomeOld:
      ip: "13.250.150.91/32"
    Office1:
      ip: "103.219.207.253/32"
    Office2:
      ip: "103.219.206.127/32"
    Office3:
      ip: "59.93.32.210/32"
    CCCMilford:               
      ip: "98.118.42.47/32"
    CCCRedHook:
      ip: "208.105.11.14/32"
    developmentVPN:
      ip: "52.43.138.183/32"
    
  ApplicationPorts:
    http:
      port: 80
    ssh:
      port: 22
    https:
      port: 443

Resources:
  SecurityGroupMain:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}'
      GroupDescription: !Sub '${AWS::StackName} access for Centizen locations'

  SecurityGroupExternalAccess:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-external-access'
      GroupDescription: !Sub '${AWS::StackName} external access'

  IngressExternalAccessAllPorts:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: 22
      ToPort: 443
      SourceSecurityGroupId: !GetAtt SecurityGroupExternalAccess.GroupId
      Description: All access to external services

  IngressSelfAllPorts:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt SecurityGroupMain.GroupId
      Description: All access to siblings

# HTTP to World Permission
  IngressHttpWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: enableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, World, ip]
      Description: HTTP Open to world

# HTTPS to World Permission
  IngressHttpsWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: enableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, World, ip]
      Description: HTTPS Open to world

# HTTP Permission
  IngressHttpAmalHome:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, AmalHome, ip]
      Description: AmalHome
  IngressHttpJamesHome:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, JamesHome, ip]
      Description: JamesHome
  IngressHttpJamesHomeOld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, JamesHomeOld, ip]
      Description: JamesHomeOld
  IngressHttpJanuryHome:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, JanuryHome, ip]
      Description: JanuryHome
  IngressHttpJanuryHomeOld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, JanuryHomeOld, ip]
      Description: JanuryHomeOld
  IngressHttpOffice1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, Office1, ip]
      Description: Office1
  IngressHttpOffice2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, Office2, ip]
      Description: Office2
  IngressHttpOffice3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, Office3, ip]
      Description: Office3
  IngressHttpCCCMilford:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, CCCMilford, ip]
      Description: CCCMilford
  IngressHttpCCCRedHook:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, CCCRedHook, ip]
      Description: CCCRedHook
  IngressHttpdevelopmentVPN:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, http, port]
      ToPort: !FindInMap [ApplicationPorts, http, port]
      CidrIp: !FindInMap [CentizenIPs, developmentVPN, ip]
      Description: developmentVPN

# HTTPS Permission
  IngressHttpsAmalHome:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, AmalHome, ip]
      Description: AmalHome
  IngressHttpsJamesHome:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, JamesHome, ip]
      Description: JamesHome
  IngressHttpsJamesHomeOld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, JamesHomeOld, ip]
      Description: JamesHomeOld
  IngressHttpsJanuryHome:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, JanuryHome, ip]
      Description: JanuryHome
  IngressHttpsJanuryHomeOld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, JanuryHomeOld, ip]
      Description: JanuryHomeOld
  IngressHttpsOffice1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, Office1, ip]
      Description: Office1
  IngressHttpsOffice2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, Office2, ip]
      Description: Office2
  IngressHttpsOffice3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, Office3, ip]
      Description: Office3
  IngressHttpsCCCMilford:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, CCCMilford, ip]
      Description: CCCMilford
  IngressHttpsCCCRedHook:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, CCCRedHook, ip]
      Description: CCCRedHook
  IngressHttspdevelopmentVPN:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: disableHTTPSToWorld
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, https, port]
      ToPort: !FindInMap [ApplicationPorts, https, port]
      CidrIp: !FindInMap [CentizenIPs, developmentVPN, ip]
      Description: developmentVPN

# SSH Permission
  IngressSshAmalHome:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, AmalHome, ip]
      Description: AmalHome
  IngressSshJamesHome:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, JamesHome, ip]
      Description: JamesHome
  IngressSshJamesHomeOld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, JamesHomeOld, ip]
      Description: JamesHomeOld
  IngresSshJanuryHome:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, JanuryHome, ip]
      Description: JanuryHome
  IngressSshJanuryHomeOld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, JanuryHomeOld, ip]
      Description: JanuryHomeOld
  IngressSshOffice1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, Office1, ip]
      Description: Office1
  IngressSshOffice2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, Office2, ip]
      Description: Office2
  IngressSshOffice3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, Office3, ip]
      Description: Office3
  IngressSshCCCMilford:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, CCCMilford, ip]
      Description: CCCMilford
  IngressSshCCCRedHook:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, CCCRedHook, ip]
      Description: CCCRedHook
  IngressSshdevelopmentVPN:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref SecurityGroupMain
      IpProtocol: tcp
      FromPort: !FindInMap [ApplicationPorts, ssh, port]
      ToPort: !FindInMap [ApplicationPorts, ssh, port]
      CidrIp: !FindInMap [CentizenIPs, developmentVPN, ip]
      Description: developmentVPN

Outputs:
  SecurityGroupMain:
    Description: Security Group for all
    Value: !GetAtt SecurityGroupMain.GroupId